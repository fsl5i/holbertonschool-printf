#include "main.h"

/**
 * print_char - prints a single character
 * @c: the character to print
 * Return: 1 on success, -1 on error
 */

int print_char(char c)

	{
	if (write(1, &c, 1) != 1)
		return (-1);
	return (1);
}

/**
 * print_string - prints a string
 * @s: the string to print
 * Return: number of characters printed, -1 on error
 */

int print_string(const char *s)

{

	int count = 0;

	if (!s)
	s = "(null)";

	while (*s)
	{
		if (write(1, s, 1) != 1)
		return (-1);
	count++;
	s++;
	}

	return (count);
}

/**
 * print_number - prints an integer
 * @n: the integer to print
 * Return: number of characters printed
 */
int print_number(int n)

{

	int count = 0;
	char c;

	if (n < 0)
	{
		if (write(1, "-", 1) != 1)
		return (-1);
	count++;
	n = -n;
	}

	if (n >= 10)
		count += print_number(n / 10);

	c = (n % 10) + '0';
if (write(1, &c, 1) != 1)
return (-1);
count++;

return (count);
}

/**
 * handle_specifier - chooses which printing function to call
 * @ap: pointer to the argument list
 * @sp: the format specifier
 * Return: number of characters printed, -1 on error
 */
int handle_specifier(va_list *ap, char sp)
{
int num;

if (sp == 'c')
return (print_char((char)va_arg(*ap, int)));
if (sp == 's')
return (print_string(va_arg(*ap, char *)));
if (sp == 'd' || sp == 'i')
{
num = va_arg(*ap, int);
return (print_number(num));
}
if (sp == '%')
return (print_char('%'));

/* unknown specifier */
if (print_char('%') == -1)
return (-1);
if (print_char(sp) == -1)
return (-1);
return (2);
}

